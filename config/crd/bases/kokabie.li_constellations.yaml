---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: constellations.kokabie.li
spec:
  group: kokabie.li
  names:
    kind: Constellation
    listKind: ConstellationList
    plural: constellations
    singular: constellation
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Constellation is the Schema for the constellations API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ConstellationSpec defines the desired state of Constellation
            properties:
              description:
                description: Description is a human-readable description of the constellation
                type: string
              filters:
                description: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
                  Filters is a list of filters that are used to select the data interfaces
                  and data processes If empty, all data interfaces and data processes
                  are used
                items:
                  properties:
                    labels:
                      additionalProperties:
                        type: string
                      description: Labels to filter for, if empty all labels are used
                      type: object
                    namespaces:
                      description: Namespace to filter for, if empty all namespaces
                        are used
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              name:
                description: Name is the displayed name of the constellation
                type: string
              targetConfigMap:
                description: TargetConfigMap is the name of the config map that is
                  used to store the constellation it uses the same namespace as the
                  constellation
                type: string
            type: object
          status:
            description: ConstellationStatus defines the observed state of Constellation
            properties:
              conditions:
                description: Conditions store the status conditions of the constellation
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              constellationResult:
                description: ConstellationResult is the result of the constellation
                properties:
                  dataInterfaceList:
                    items:
                      properties:
                        description:
                          description: Description is a human-readable description
                            of the data interface
                          type: string
                        labels:
                          additionalProperties:
                            type: string
                          description: Labels is a set of labels for the data interface
                          type: object
                        name:
                          description: Name is the displayed name of the data interface
                          type: string
                        reference:
                          description: Reference is a cluster-wide unique identifier
                            for the data interface
                          type: string
                        source:
                          description: Source is the namespaced name of the data interface
                          properties:
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        type:
                          description: Type is the type of the data interface (e.g.
                            "topic", "queue", "database", "file")
                          type: string
                      type: object
                    type: array
                  dataProcessList:
                    items:
                      properties:
                        description:
                          description: Description is a human-readable description
                            of the data process
                          type: string
                        inputs:
                          description: Inputs is a list of data interfaces that are
                            used as input for the data process
                          items:
                            properties:
                              description:
                                description: Description is a human-readable description
                                  of the data interface
                                type: string
                              info:
                                description: Info is a human-readable description
                                  of the data interface
                                type: string
                              reference:
                                description: References the data interface
                                type: string
                              trigger:
                                description: Trigger is true if the data interface
                                  triggers further processing Outgoing edges to kafka
                                  topics usually have this set to true while incoming
                                  edges from kafka topics usually have this set to
                                  true.
                                type: boolean
                            type: object
                          type: array
                        labels:
                          additionalProperties:
                            type: string
                          description: Labels is a set of labels for the data interface
                          type: object
                        name:
                          description: Name is the displayed name of the data process
                          type: string
                        outputs:
                          description: Outputs is a list of data interfaces that are
                            used as output for the data process
                          items:
                            properties:
                              description:
                                description: Description is a human-readable description
                                  of the data interface
                                type: string
                              info:
                                description: Info is a human-readable description
                                  of the data interface
                                type: string
                              reference:
                                description: References the data interface
                                type: string
                              trigger:
                                description: Trigger is true if the data interface
                                  triggers further processing Outgoing edges to kafka
                                  topics usually have this set to true while incoming
                                  edges from kafka topics usually have this set to
                                  true.
                                type: boolean
                            type: object
                          type: array
                        source:
                          description: Source is the namespaced name of the data process
                          properties:
                            name:
                              type: string
                            namespace:
                              type: string
                          type: object
                        type:
                          description: Type is the type of the data process (e.g.
                            "spring-cloud-stream", "kafka-streams", "spark-streaming")
                          type: string
                      type: object
                    type: array
                  description:
                    type: string
                  lastUpdated:
                    format: date-time
                    type: string
                  name:
                    type: string
                required:
                - dataInterfaceList
                - dataProcessList
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
